;   Copyright (c) Cognitect, Inc. All rights reserved.
;   The use and distribution terms for this software are covered by the
;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;   which can be found in the file epl-v10.html at the root of this distribution.
;   By using this software in any fashion, you are agreeing to be bound by
;   the terms of this license.
;   You must not remove this notice, or any other, from this software.

(require '[datomic.client.api :as d])
(import '(java.util UUID))

;; Define the configuration for your client:
(def client-cfg (read-string (slurp "config.edn")))

;; Create a client:
(def client (d/client client-cfg))

;; Create a new database:
(def db-name (str "raymond-" (UUID/randomUUID)))
(d/create-database client {:db-name db-name})

;; Connect to your new database:
(def conn (d/connect client {:db-name db-name}))

(def schema
  [{:db/ident :person/name
    :db/valueType :db.type/string
    :db/cardinality :db.cardinality/one}
   {:db/ident :person/loves
    :db/valueType :db.type/ref
    :db/cardinality :db.cardinality/one}])

(d/transact conn {:tx-data schema})

;; tempids are caller-defined strings: every "ray" is the same entity
(def people
  [{:db/id "ray"
    :person/name "Ray"
    :person/loves "ray"}
   {:person/name "Debra"
    :person/loves "ray"}
   {:person/name "Robert"
    :person/loves "ray"}])

(d/transact conn {:tx-data people})

(def who-loves-raymond
  '[:find ?e ?name
    :keys db/id person/name
    :where [?ray :person/name "Ray"]
           [?e :person/loves ?ray]
           [?e :person/name ?name]])

@(def lovers (d/q who-loves-raymond (d/db conn)))
;; => [{:db/id 24338789392449612, :person/name "Debra"}
;;     {:db/id 68803039619711053, :person/name "Robert"}
;;     {:db/id 32211292647325771, :person/name "Ray"}]

;; entity ids are opaque numbers
@(def entity-ids (mapv :db/id lovers))
;; => [24338789392449612 68803039619711053 32211292647325771]

(def ray-id (->> lovers (filter (comp #{"Ray"} :person/name)) first :db/id))
(def db (d/db conn))
(d/pull db '[*] ray-id)
;; => {:db/id 32211292647325771,
;;     :person/name "Ray",
;;     :person/loves #:db{:id 32211292647325771}}

;; domain identity: make each person/name unique
(def add-unique [{:db/id :person/name
                  :db/unique :db.unique/identity}])
(d/transact conn {:tx-data add-unique})

;; now you can lookup people by domain identity
(def db (d/db conn))
(d/pull db '[*] [:person/name "Debra"])

;; => {:db/id 24338789392449612,
;;     :person/name "Debra",
;;     :person/loves {:db/id 32211292647325771,
;;                    :person/name "Ray",
;;                    :person/loves #:db{:id 32211292647325771}}}

;; person/name is a terrible unique id. Lots of people are named "Ray"
;; so let's make a globally unique identifier
(def person-uuid-schema {:db/ident :person/uuid
                         :db/cardinality :db.cardinality/one
                         :db/unique :db.unique/identity
                         :db/valueType :db.type/uuid})
(d/transact conn {:tx-data [person-uuid-schema]})

@(def add-person-uuids
   (mapv
    (fn [{:keys [db/id]}]
      [:db/add id :person/uuid (java.util.UUID/randomUUID)])
    lovers))
;; => [[:db/add 24338789392449612 :person/uuid #uuid "36577b7c-041b-4ceb-a5f8-433d3b435268"]
;;     [:db/add 68803039619711053 :person/uuid #uuid "f975233b-e71f-4f94-80f2-6d261af50ac2"]
;;     [:db/add 32211292647325771 :person/uuid #uuid "09f116ea-6691-42b0-b801-b838a1c389e5"]]

(d/transact conn {:tx-data add-person-uuids})

@(def debra-db-id (->> lovers (filter (comp #{"Debra"} :person/name)) first :db/id))

@(def debra-uuid (->> add-person-uuids
                      (filter (comp #{debra-db-id} second))
                      first
                      last))

(def db (d/db conn))
(d/pull db
        '[:person/name]
        [:person/uuid debra-uuid])
;; => #:person{:name "Debra"}

;; Delete the database when finished
(d/delete-database client {:db-name db-name})
